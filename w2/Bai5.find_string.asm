section .data
    strS db 'Nhap chuoi S: ',0x0
    strC db 'Nhap chuoi C: ',0x0
    msg1 db 'So lan xuat hien cua chuoi C: ',0x0
    msg2 db 'Vi tri xuat hien cua chuoi C: ',0x0
    count db 0 


section .bss
    s resb 255
    c resb 255
    lenC resb 1
section .text
    global _start
    _start:
        ;output the message "Nhap chuoi S: "
        mov eax,strS
        call print_string

        ;Enter string S
        mov eax,3
        mov ebx,0
        mov ecx,s 
        mov edx, 100
        int 80h

        ;output the message "Nhap chuoi C: "
        mov eax,strC
        call print_string

        ;Enter string C
        mov eax,3
        mov ebx,0
        mov ecx,c 
        mov edx, 100
        int 80h

        mov eax,s
        call string_len  
        mov edx,eax
                ;call print_int_space       
        mov eax,c 
        call string_len
        mov ecx, eax
        dec eax
        dec eax
        mov [lenC], eax
                ;call print_int_space
        sub edx,ecx     
        mov ecx,edx
    ;find string C in string S
        ;print msg2
        mov eax,msg2
        call print_string_space

        mov edx,c
        mov eax,s
        mov esi,0
        loop1:
            cmp esi,ecx
            jg exit
            mov ebx,0
        loop2:
            push esi
            push ebx
            add esi,ebx
            push ecx
            mov byte cl,[eax + esi]     ;s + esi
            mov byte ch, [edx + ebx]    ;c + ebx
            cmp cl,ch

            pop ecx
            pop ebx
            pop esi

            je equal
            jmp loop_done

        equal:
            cmp ebx,[lenC]
            jl cmp_again
            jmp print_to_screen
        print_to_screen:
            push eax
            mov eax,esi
            call print_int_space
            pop eax

            inc byte [count]
            jmp loop_done
        cmp_again:
            inc ebx
            jmp loop2
        loop_done:
            inc esi
            jmp loop1
        exit:
            mov	eax, msg1
            call	print_string_space
            
            mov	eax, [count]
            call	print_int_space
            
            mov	ebx, 0
            mov	eax, 1
            int 	80h
                
    ;-----------------------------------------------
    ;lay do dai chuoi
    string_len:
        push ebx
        mov ebx,eax
    next_char:
        cmp byte [eax],0
        jz _endString
        inc eax
        jmp next_char
    _endString:
        sub eax,ebx
        pop ebx
        ret

    ;-----------------------------------------------
    ;in chuoi
    print_string:
        push edx
        push ecx
        push ebx
        push eax
        call string_len   ;eax <- len(string)
        mov edx, eax
        pop eax           ;eax <- string
        mov ecx, eax
        mov ebx,1
        mov eax,4
        int 80h

        pop ebx
        pop ecx
        pop edx
        ret
        
    ;-----------------------------------------------
    ;in chuoi co xuong dong
    print_string_space:
        call print_string
        push eax
        mov eax,0ah
        push eax
        mov eax, esp
        call print_string
        pop eax
        pop eax
        ret
    ;-----------------------------------------------
    ;in so ra man hinh
    print_int:
        push eax
        push ecx
        push edx
        push esi
        mov ecx,0
    div_loop:
        inc ecx
        xor edx,edx
        mov esi,10
        idiv esi
        add edx,48
        push edx
        cmp eax,0
        jnz div_loop
    print_loop:
        dec ecx
        mov eax,esp
        call print_string
        pop eax
        cmp ecx,0
        jnz print_loop

        pop esi
        pop edx
        pop ecx
        pop eax
        ret
    ;-----------------------------------------------
    ;in so co xuong dong
    print_int_space:
        call print_int
        
        push	eax
        mov	eax, 0xa
        push	eax
        mov	eax, esp
        call	print_string
        pop	eax
        pop	eax
        ret	
   